version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

# 服务容器配置
services:
  golang: # 自定义容器名称
    build:
      context: ./golang # 指定构建是用的Dockerfile文件
    environment:        # 设置环境变量
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${CODE_PATH_HOST}:/usr/src/code # 挂载目录设置，引用.env中配置的CODE_PATH_HOST变量，将宿主机上代码存放的目录挂载到容器中/usr/src/code目录
    ports: # 设置端口映射
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8003:8003"
      - "9000:9000"
      - "9001:9001"
      - "9002:9002"
      - "9003:9003"
    stdin_open: true # 接受外部输入
    tty: true
    networks:
      - backend
    restart: always
  etcd: # 自定义容器名称
    build:
      context: ./etcd #指定构建是用的Dockerfile文件
    environment:
      - TZ:=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTIES_CLIENT_URLS=http://etcd:2379
    ports:
      - "${ETCD_PORT}:2379"
    networks:
      - backend
    restart: always

  mysql:
    build:
      context: ./mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend
    restart: always

  mysql-manage:
    build:
      context: ./mysql-manage
    environment:
      - TZ=${TZ}
      - PMA_ARBITRARY=1
      - MYSQL_USER=${MYSQL_MANAGE_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_MANAGE_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_MANAGE_ROOT_PASSWORD}
      - PMA_HOST=${MYSQL_MANAGE_CONNECT_HOST}
      - PMA_PORT=${MYSQL_MANAGE_CONNECT_PORT}
    ports:
      - "${MYSQL_MANAGE_PORT}:80"
    depends_on:
      - mysql
    networks:
      - backend
    restart: always

  redis:
    build:
      context: ./redis
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend
    restart: always

  redis-manage:
    build:
      context: ./redis-manage
    environment:
      - TZ=${TZ}
      - ADMIN_USER=${REDIS_MANAGE_USERNAME}
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}
      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT}
    ports:
      - "${REDIS_MANAGE_PORT}:80"
    depends_on:
      - redis
    networks:
      - backend
    restart: always

  etcd-manage:
    build:
      context: ./etcd-manage
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080"
    depends_on:
      - etcd
    networks:
      - backend
    restart: always

  prometheus:
    build:
      context: ./prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml # 将prometheus配置文件挂载到容器
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - backend
    restart: always

  grafana:
    build:
      context: ./grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - backend
    restart: always

  jaeger:
    build:
      context: ./jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"
    networks:
      - backend
    restart: always


  dtm:
    build:
      context: ./dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/cofigs/config.yaml"
    privileged: true
    volumes:
      - ./dtm/config.yml:/app/dtm/configs/config.yaml
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always
